{"version":3,"file":"static/js/611.547a1a6c.chunk.js","mappings":"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","sources":["component/ShopComponent/FilterNav.tsx","component/ShopComponent/ProductsShow.tsx","pages/productsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport products_list from \"../../data/products_list.json\";\r\n\r\nconst FilterNav = (props: any) => {\r\n  // 获取需要的数据\r\n  const itemList: {\r\n    title: string;\r\n    img_url: string;\r\n    price: string;\r\n    weight: string;\r\n    text: string;\r\n    series: string;\r\n  }[] = products_list;\r\n\r\n  // 得到所有的series name\r\n  const allSeriesList = itemList.map((item) => {\r\n    return item.series;\r\n  });\r\n\r\n  // 过滤重复的数据的函数\r\n  function unique(arr: string[]) {\r\n    return Array.from(new Set(arr));\r\n  }\r\n  // 得到不重复的seriesList\r\n  const seriesList = unique(allSeriesList);\r\n\r\n  // 控制下拉菜单的状态\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // 子组件接收参数，传递数据给父组件\r\n  let { getSeriesName } = props;\r\n  const [seriesName, setSeriesName] = useState<string>(\"All Series\");\r\n  // 待页面渲染完成后执行父组件修改状态的方法的监听，[]里的是依赖，需要依赖变化才会触发useEffect的重新渲染\r\n  useEffect(() => {\r\n    getSeriesName(seriesName);\r\n  }, [seriesName, getSeriesName]);\r\n\r\n  return (\r\n    <div className=\"bg-slate-300 text-[1.25rem] p-3 lg:pt-6 lg:col-start-1 lg:col-end-1\">\r\n      {/* Filter 按键 电脑端不显示 */}\r\n      <div className=\"text-right\">\r\n        <div\r\n          className=\"lg:hidden inline-block cursor-pointer\"\r\n          onClick={() => {\r\n            setOpen(!open);\r\n          }}\r\n        >\r\n          Filter\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            strokeWidth={1.5}\r\n            stroke=\"currentColor\"\r\n            className=\"ml-1 w-6 h-6 inline\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              d=\"M10.5 6h9.75M10.5 6a1.5 1.5 0 11-3 0m3 0a1.5 1.5 0 10-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 01-3 0m3 0a1.5 1.5 0 00-3 0m-9.75 0h9.75\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      {/* 菜单选项 */}\r\n      {/* 传入state改变className */}\r\n      <div className=\"hidden text-[2.5rem] h-[3rem] leading-[3rem] mx-4 lg:inline\">\r\n        Series\r\n      </div>\r\n      <ul\r\n        className={`px-2 divide-y-2 ${\r\n          open ? \"\" : \"hidden\"\r\n        } lg:block lg:divide-y-2 lg:m-6`}\r\n      >\r\n        <li\r\n          className=\"text-[1.5rem] h-[3rem] leading-[3rem] cursor-pointer active:bg-gray-300\"\r\n          id=\"All Series\"\r\n          onClick={(e) => {\r\n            setSeriesName(e.currentTarget.id);\r\n          }}\r\n        >\r\n          All\r\n        </li>\r\n        {seriesList.map((item) => (\r\n          <div\r\n            className=\"text-[1.5rem] h-[3rem] leading-[3rem] cursor-pointer active:bg-gray-300\"\r\n            key={item}\r\n            id={item}\r\n            // 踩坑：1.key值无法被读取 2.需要使用 currentTarget\r\n            onClick={(e) => {\r\n              setSeriesName(e.currentTarget.id);\r\n            }}\r\n          >\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterNav;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Card } from \"antd\";\r\nimport { List, ConfigProvider } from \"antd\";\r\nimport productsList from \"../../data/products_list.json\";\r\nimport { SeriesContext } from \"../../pages/productsPage\";\r\n\r\nconst ProductsShow: React.FC = () => {\r\n  // 拿不到后台数据接口，用手写JSON代替一下\r\n  const itemList: {\r\n    title: string;\r\n    img_url: string;\r\n    price: string;\r\n    weight: string;\r\n    text: string;\r\n    series: string;\r\n  }[] = productsList;\r\n\r\n  // 卡片组件\r\n  const { Meta } = Card;\r\n\r\n  // 渲染的状态\r\n  const [showList, setShowList] = useState(itemList);\r\n\r\n  // 接收父组件的数据\r\n  const seriesName = useContext(SeriesContext);\r\n\r\n  // 通过filter筛选出符合series条件的数组，useEffect 让函数在页面渲染后执行\r\n  useEffect(() => {\r\n    const filterSeries = itemList.filter((item) => {\r\n      return item.series === seriesName;\r\n    });\r\n\r\n    filterSeries.length === 0\r\n      ? setShowList(itemList)\r\n      : setShowList(filterSeries);\r\n  }, [seriesName, itemList]);\r\n\r\n  return (\r\n    // 修改组件默认主题色\r\n    <ConfigProvider\r\n      theme={{\r\n        token: {\r\n          colorPrimary: \"gray\",\r\n        },\r\n      }}\r\n    >\r\n      {/* 左上角系列名 */}\r\n      <div className=\"absolute text-[2rem] pt-1 ml-[5%] sm:ml-[4%] lg:ml-[18.2%] z-10\">\r\n        {seriesName}\r\n      </div>\r\n      {/* Grid List 组件 */}\r\n      <List\r\n        className=\"bg-slate-300 pt-6 md: col-start-2 md:col-end-7\"\r\n        grid={{\r\n          gutter: 0,\r\n          xs: 1,\r\n          sm: 2,\r\n          md: 2,\r\n          lg: 2,\r\n          xl: 3,\r\n          xxl: 3,\r\n        }}\r\n        dataSource={showList} // 这个参数会收到传来的数据\r\n        pagination={{\r\n          pageSize: 6,\r\n          className: \"float-none text-center pb-6\",\r\n        }}\r\n        renderItem={(item) => (\r\n          <List.Item>\r\n            <Card\r\n              className=\"block h-[25rem] mt-10 cursor-pointer\"\r\n              hoverable\r\n              bordered\r\n              cover={\r\n                <img\r\n                  className=\"h-[15rem] object-cover\"\r\n                  alt=\"\"\r\n                  src={item.img_url}\r\n                />\r\n              }\r\n            >\r\n              <Meta title={item.title} />\r\n              <div className=\"my-6\">\r\n                {item.price}\r\n                <span className=\"px-2\">—</span>\r\n                {item.weight}\r\n              </div>\r\n              <Meta description={item.text}></Meta>\r\n            </Card>\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default ProductsShow;\r\n","import React, { createContext, useState } from \"react\";\r\nimport FilterNav from \"../component/ShopComponent/FilterNav\";\r\nimport ProductsShow from \"../component/ShopComponent/ProductsShow\";\r\n\r\nexport const SeriesContext = createContext(\"\");\r\n\r\nfunction ProductsPage() {\r\n  // 设置状态\r\n  const [series, setSeries] = useState(\"\");\r\n\r\n  // 设置改变状态的方法\r\n  const getSeriesName = (seriesName: any) => {\r\n    setSeries(seriesName);\r\n  };\r\n\r\n  return (\r\n    <SeriesContext.Provider value={series}>\r\n      <div className=\"lg:grid lg:grid-cols-6\">\r\n        {/* 将状态和设置状态的方法以参数传给子组件 */}\r\n        <FilterNav series={series} getSeriesName={getSeriesName} />\r\n        <ProductsShow />\r\n      </div>\r\n    </SeriesContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ProductsPage;\r\n"],"names":["props","allSeriesList","products_list","map","item","series","arr","seriesList","Array","from","Set","useState","open","setOpen","getSeriesName","seriesName","setSeriesName","useEffect","className","onClick","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","id","e","currentTarget","itemList","productsList","Meta","Card","showList","setShowList","useContext","SeriesContext","filterSeries","filter","length","theme","token","colorPrimary","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","pagination","pageSize","renderItem","hoverable","bordered","cover","alt","src","img_url","title","price","weight","description","text","createContext","setSeries","Provider","value"],"sourceRoot":""}